export interface RenderSchemaOptions {
  storeImportPath: string;
  tableName: string;
  keyTuple: string[];
  fields: RenderSchemaField[];
  staticFields: RenderSchemaStaticField[];
  dynamicFields: RenderSchemaDynamicField[];
}

export interface RenderSchemaStaticField extends RenderSchemaField {
  isDynamic: false;
}

export interface RenderSchemaDynamicField extends RenderSchemaField {
  isDynamic: true;
}

export interface RenderSchemaField extends RenderSchemaType {
  arrayElement: RenderSchemaType | undefined;
  name: string;
  methodName: string;
}

export interface RenderSchemaType {
  typeId: string;
  typeLoc: string;
  enumName: string;
  staticByteLength: number;
  isDynamic: boolean;
}

export function renderSchema({
  storeImportPath,
  tableName,
  keyTuple,
  fields,
  staticFields,
  dynamicFields,
}: RenderSchemaOptions) {
  const totalStaticLength = staticFields.reduce((acc, { staticByteLength }) => acc + staticByteLength, 0);
  const withDynamic = dynamicFields.length > 0;

  // Static field offsets
  const staticOffsets = staticFields.map(() => 0);
  let _acc = 0;
  for (const [index, field] of staticFields.entries()) {
    staticOffsets[index] = _acc;
    _acc += field.staticByteLength;
  }

  return `// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

import { IStore } from "${storeImportPath}IStore.sol";
import { StoreSwitch } from "${storeImportPath}StoreSwitch.sol";
import { StoreCore } from "${storeImportPath}StoreCore.sol";
import { SchemaType } from "${storeImportPath}Types.sol";
import { Bytes } from "${storeImportPath}Bytes.sol";
import { SliceLib } from "${storeImportPath}Slice.sol";
import { EncodeArray } from "${storeImportPath}tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "${storeImportPath}Schema.sol";
import { PackedCounter, PackedCounterLib } from "${storeImportPath}PackedCounter.sol";

struct ${tableName} {
  ${renderList("", fields, ({ name, typeId }) => `${typeId} ${name};`)}
}

library ${tableName}_ {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](${fields.length});
    ${renderList("", fields, ({ enumName }, index) => `_schema[${index}] = SchemaType.${enumName};`)}

    return SchemaLib.encode(_schema);
  }

  /** Register the table's schema */
  function registerSchema(uint256 tableId) internal {
    StoreSwitch.registerSchema(tableId, getSchema());
  }

  function registerSchema(uint256 _tableId, IStore _store) internal {
    _store.registerSchema(_tableId, getSchema());
  }

  /** Set the table's data */
  function set(
    uint256 _tableId,
    ${renderKeyArgs(keyTuple)},
    ${renderList(",", fields, ({ name, typeLoc }) => `${typeLoc} ${name}`)}
  ) internal {
    ${renderEncodedLengths(dynamicFields)}
    bytes memory _data = abi.encodePacked(
      ${renderList(
        ",",
        staticFields,
        ({ name }) =>
          // encode static fields
          name
      )}
      ${staticFields.length > 0 && withDynamic ? "," : ""}
      ${_if(withDynamic)`_encodedLengths.unwrap(),`}
      ${renderList(",", dynamicFields, (field) => renderEncodeField(field))}
    );

    ${renderKeyTuple(keyTuple)}

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  function set(
    uint256 _tableId,
    ${renderKeyArgs(keyTuple)},
    ${tableName} memory _table
  ) internal {
    set(
      _tableId,
      ${renderList(",", keyTuple, (key) => key)},
      ${renderList(",", fields, ({ name }) => `_table.${name}`)}
    );
  }

${renderList("", fields, (field, index) => {
  // setter for each key
  const { typeLoc, name, methodName } = field;
  return `
    function set${methodName}(
      uint256 _tableId,
      ${renderKeyArgs(keyTuple)},
      ${typeLoc} ${name}
    ) internal {
      ${renderKeyTuple(keyTuple)}
      StoreSwitch.setField(_tableId, _keyTuple, ${index}, ${renderEncodeField(field)});
    }
  `;
})}

${renderList("", fields, (field, index) => {
  // getter for each key
  const { typeLoc, name, methodName } = field;
  return `
    function get${methodName}(
      uint256 _tableId,
      ${renderKeyArgs(keyTuple)}
    ) internal view returns (${typeLoc} ${name}) {
      ${renderKeyTuple(keyTuple)}
      bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, ${index});
      return ${renderDecodeFieldSingle(field)};
    }
  `;
})}

  /** Get the table's data */
  function get(
    uint256 _tableId,
    ${renderKeyArgs(keyTuple)}
  ) internal view returns (${tableName} memory _table) {
    ${renderKeyTuple(keyTuple)}
    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  function get(
    uint256 _tableId,
    IStore _store,
    ${renderKeyArgs(keyTuple)}
  ) internal view returns (${tableName} memory _table) {
    ${renderKeyTuple(keyTuple)}
    bytes memory _blob = _store.getRecord(_tableId, _keyTuple);
    return decode(_blob);
  }

${
  // decode static (optionally) and dynamic data
  _if(withDynamic)`
  function decode(bytes memory _blob) internal view returns (${tableName} memory _table) {
    // ${totalStaticLength} is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, ${totalStaticLength})); 

    ${renderList(
      "",
      staticFields,
      (field, index) => `_table.${field.name} = ${renderDecodeStaticFieldPartial(field, staticOffsets[index])};`
    )}
    uint256 _start;
    uint256 _end = ${totalStaticLength + 32};
    ${renderList(
      "",
      dynamicFields,
      (field, index) =>
        `
      _start = _end;
      _end += _encodedLengths.atIndex(${index});
      _table.${field.name} = ${renderDecodeDynamicFieldPartial(field)};`
    )}
  }
`
}

${
  // decode only static data
  _if(!withDynamic)`
  function decode(bytes memory _blob) internal pure returns (${tableName} memory _table) {
    ${renderList(
      "",
      staticFields,
      (field, index) => `
      _table.${field.name} = ${renderDecodeStaticFieldPartial(field, staticOffsets[index])};
    `
    )}
  }
`
}

}

${
  // nothing can be cast to bool, so an assembly helper is required
  _if(fields.some(({ typeId }) => typeId === "bool"))`
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
`
}

`;
}

function zipTaggedTemplate(strings: TemplateStringsArray, ...values: (string | number)[]) {
  let result = strings[0];
  for (const [index, value] of values.entries()) {
    result += value + strings[index + 1];
  }
  return result;
}

function _if(condition: boolean) {
  if (condition) {
    return zipTaggedTemplate;
  } else {
    return () => "";
  }
}

function renderList<T>(lineTerminator: string, list: T[], renderItem: (item: T, index: number) => string) {
  return list
    .map((item, index) => renderItem(item, index) + (index === list.length - 1 ? "" : lineTerminator))
    .join("\n");
}

function renderKeyArgs(keys: string[]) {
  return renderList(",", keys, (key) => `bytes32 ${key}`);
}

function renderKeyTuple(keys: string[]) {
  return (
    `bytes32[] memory _keyTuple = new bytes32[](${keys.length});
` + renderList("", keys, (key, index) => `_keyTuple[${index}] = ${key};`)
  );
}

function renderEncodeField(field: RenderSchemaField) {
  let func;
  if (field.arrayElement) {
    func = "EncodeArray.encode";
  } else if (field.isDynamic) {
    func = "bytes";
  } else {
    func = "abi.encodePacked";
  }
  return `${func}(${field.name})`;
}

function renderEncodedLengths(dynamicFields: RenderSchemaField[]) {
  if (dynamicFields.length > 0) {
    return `uint16[] memory _counters = new uint16[](${dynamicFields.length});
${renderList("", dynamicFields, ({ name, arrayElement }, index) => {
  if (arrayElement) {
    return `_counters[${index}] = uint16(${name}.length * ${arrayElement.staticByteLength});`;
  } else {
    return `_counters[${index}] = uint16(bytes(${name}).length);`;
  }
})}
PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);
`;
  } else {
    return "";
  }
}

function renderDecodeFieldSingle(field: RenderSchemaField) {
  const { typeId, isDynamic, arrayElement } = field;
  if (arrayElement) {
    // arrays
    return `SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_${arrayElement.typeId}()`;
  } else if (isDynamic) {
    // bytes/string
    return `${typeId}(_blob)`;
  } else {
    return _decodeValueType(typeId, field.staticByteLength, 0);
  }
}

function renderDecodeDynamicFieldPartial(field: RenderSchemaDynamicField) {
  const { typeId, arrayElement } = field;
  if (arrayElement) {
    // arrays
    return `SliceLib.getSubslice(_blob, _start, _end).decodeArray_${arrayElement.typeId}()`;
  } else {
    // bytes/string
    return `${typeId}(SliceLib.getSubslice(_blob, _start, _end).toBytes())`;
  }
}

function renderDecodeStaticFieldPartial(field: RenderSchemaStaticField, start: number) {
  const { typeId, staticByteLength } = field;
  return _decodeValueType(typeId, staticByteLength, start);
}

function _decodeValueType(typeId: string, staticByteLength: number, offset: number) {
  const innerSlice = `Bytes.slice${staticByteLength}(_blob, ${offset})`;
  const bits = staticByteLength * 8;

  if (typeId.match(/^uint\d{1,3}$/) || typeId === "address") {
    return `${typeId}(${innerSlice})`;
  } else if (typeId.match(/^int\d{1,3}$/)) {
    return `${typeId}(uint${bits}(${innerSlice})`;
  } else if (typeId.match(/^bytes\d{1,2}$/)) {
    return innerSlice;
  } else if (typeId === "bool") {
    return `_toBool(uint8(${innerSlice}))`;
  } else {
    throw new Error(`Unknown value type id ${typeId}`);
  }
}
