import { renderList, renderListWithCommas, TaggedTemplate, zipTaggedTemplate, _if } from "../utils/render.js";

/**
 * Methods prefixed with `_` involve tagged templates!
 */

export interface RenderSchemaOptions {
  /** Name of the library to render. */
  libraryName: string;
  /** Name of the struct to render. If undefined, struct and its methods aren't rendered. */
  structName?: string;
  /** Data used to statically registed the table. If undefined, all methods receive `_tableId` as an argument. */
  staticRouteData?: StaticRouteData;
  storeImportPath: string;
  keyTuple: string[];
  fields: RenderSchemaField[];
  staticFields: RenderSchemaStaticField[];
  dynamicFields: RenderSchemaDynamicField[];
  /** Whether to render get/set methods for the whole record */
  withRecordMethods: boolean;
}

export interface StaticRouteData {
  /** Name of the table id constant to render. */
  tableIdName: string;
  baseRoute: string;
  subRoute: string;
}

export interface RenderSchemaStaticField extends RenderSchemaField {
  isDynamic: false;
}

export interface RenderSchemaDynamicField extends RenderSchemaField {
  isDynamic: true;
}

export interface RenderSchemaField extends RenderSchemaType {
  arrayElement: RenderSchemaType | undefined;
  name: string;
  methodNameSuffix: string;
}

export interface RenderSchemaType {
  typeId: string;
  typeWithLocation: string;
  enumName: string;
  staticByteLength: number;
  isDynamic: boolean;
}

export function renderSchema({
  libraryName,
  structName,
  staticRouteData,
  storeImportPath,
  keyTuple,
  fields,
  staticFields,
  dynamicFields,
  withRecordMethods,
}: RenderSchemaOptions) {
  const totalStaticLength = staticFields.reduce((acc, { staticByteLength }) => acc + staticByteLength, 0);
  const withDynamic = dynamicFields.length > 0;

  const withStruct = structName !== undefined;

  // Static field offsets
  const staticOffsets = staticFields.map(() => 0);
  let _acc = 0;
  for (const [index, field] of staticFields.entries()) {
    staticOffsets[index] = _acc;
    _acc += field.staticByteLength;
  }

  // Render table argument with the appended template, if not using a static tableId
  // (the template is used to append e.g. "," for argument lists)
  const withTableIdArgument = staticRouteData === undefined;
  const _tableId: TaggedTemplate = (strings, ...values) => {
    if (withTableIdArgument) {
      return "uint256 _tableId" + zipTaggedTemplate(strings, ...values);
    } else {
      return "";
    }
  };
  const fullStaticRoute = staticRouteData ? staticRouteData.baseRoute + staticRouteData.subRoute : "";

  const withKeys = keyTuple.length > 0;
  const _keyArgs: TaggedTemplate = (strings, ...values) => {
    if (withKeys) {
      return renderListWithCommas(keyTuple, (key) => `bytes32 ${key}`) + zipTaggedTemplate(strings, ...values);
    } else {
      return "";
    }
  };

  /** Names should be strings even if they're never used (see {@link _if}) */
  structName ??= "";
  const tableIdName = staticRouteData?.tableIdName ?? "";

  return `// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

import { IStore } from "${storeImportPath}IStore.sol";
import { StoreSwitch } from "${storeImportPath}StoreSwitch.sol";
import { StoreCore } from "${storeImportPath}StoreCore.sol";
import { SchemaType } from "${storeImportPath}Types.sol";
import { Bytes } from "${storeImportPath}Bytes.sol";
import { SliceLib } from "${storeImportPath}Slice.sol";
import { EncodeArray } from "${storeImportPath}tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "${storeImportPath}Schema.sol";
import { PackedCounter, PackedCounterLib } from "${storeImportPath}PackedCounter.sol";

${_if(!withTableIdArgument)`
  uint256 constant _tableId = uint256(keccak256("${fullStaticRoute}"));
  uint256 constant ${tableIdName} = _tableId;
`}

${_if(withStruct)`
  struct ${structName} {
    ${renderList(fields, ({ name, typeId }) => `${typeId} ${name};`)}
  }
`}

library ${libraryName} {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](${fields.length});
    ${renderList(fields, ({ enumName }, index) => `_schema[${index}] = SchemaType.${enumName};`)}

    return SchemaLib.encode(_schema);
  }

  /** Register the table's schema */
  function registerSchema(${_tableId``}) internal {
    StoreSwitch.registerSchema(_tableId, getSchema());
  }

  function registerSchema(${_tableId`,`} IStore _store) internal {
    _store.registerSchema(_tableId, getSchema());
  }

${renderList(fields, (field, index) => {
  // setter for each key
  const { typeWithLocation, name, methodNameSuffix } = field;
  return `
    function set${methodNameSuffix}(
      ${_tableId`,`}
      ${_keyArgs`,`}
      ${typeWithLocation} ${name}
    ) internal {
      ${renderKeyTuple(keyTuple)}
      StoreSwitch.setField(_tableId, _keyTuple, ${index}, ${renderEncodeField(field)});
    }
  `;
})}

${renderList(fields, (field, index) => {
  // getter for each key
  const { typeWithLocation, name, methodNameSuffix } = field;
  return `
    function get${methodNameSuffix}(
      ${_tableId`${_if(withKeys)`,`}`}
      ${_keyArgs``}
    ) internal view returns (${typeWithLocation} ${name}) {
      ${renderKeyTuple(keyTuple)}
      bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, ${index});
      return ${renderDecodeFieldSingle(field)};
    }
  `;
})}

${_if(withRecordMethods)`
  /** Set the table's data */
  function set(
    ${_tableId`,`}
    ${_keyArgs`,`}
    ${renderListWithCommas(fields, ({ name, typeWithLocation }) => `${typeWithLocation} ${name}`)}
  ) internal {
    ${renderEncodedLengths(dynamicFields)}
    bytes memory _data = abi.encodePacked(
      ${renderListWithCommas(
        staticFields,
        ({ name }) =>
          // encode static fields
          name
      )}
      ${_if(staticFields.length > 0 && withDynamic)`,`}
      ${_if(withDynamic)`_encodedLengths.unwrap(),`}
      ${renderListWithCommas(dynamicFields, (field) => renderEncodeField(field))}
    );

    ${renderKeyTuple(keyTuple)}

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  ${_if(withStruct)`
    function set(
      ${_tableId`,`}
      ${_keyArgs`,`}
      ${structName} memory _table
    ) internal {
      set(
        ${_if(withTableIdArgument)`_tableId,`}
        ${renderListWithCommas(keyTuple, (key) => key)}${_if(withKeys)`,`}
        ${renderListWithCommas(fields, ({ name }) => `_table.${name}`)}
      );
    }
  `}
`}

${_if(withRecordMethods && withStruct)`
  /** Get the table's data */
  function get(
    ${_tableId`${_if(withKeys)`,`}`}
    ${_keyArgs``}
  ) internal view returns (${structName} memory _table) {
    ${renderKeyTuple(keyTuple)}
    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  function get(
    ${_tableId`,`}
    IStore _store${_if(withKeys)`,`}
    ${_keyArgs``}
  ) internal view returns (${structName} memory _table) {
    ${renderKeyTuple(keyTuple)}
    bytes memory _blob = _store.getRecord(_tableId, _keyTuple);
    return decode(_blob);
  }

  ${
    // decode static (optionally) and dynamic data
    _if(withDynamic)`
    function decode(bytes memory _blob) internal view returns (${structName} memory _table) {
      // ${totalStaticLength} is the total byte length of static data
      PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, ${totalStaticLength})); 

      ${renderList(
        staticFields,
        (field, index) => `
        _table.${field.name} = ${renderDecodeStaticFieldPartial(field, staticOffsets[index])};
        `
      )}
      uint256 _start;
      uint256 _end = ${totalStaticLength + 32};
      ${renderList(
        dynamicFields,
        (field, index) => `
        _start = _end;
        _end += _encodedLengths.atIndex(${index});
        _table.${field.name} = ${renderDecodeDynamicFieldPartial(field)};
        `
      )}
    }
  `
  }

  ${
    // decode only static data
    _if(!withDynamic)`
    function decode(bytes memory _blob) internal pure returns (${structName} memory _table) {
      ${renderList(
        staticFields,
        (field, index) => `
        _table.${field.name} = ${renderDecodeStaticFieldPartial(field, staticOffsets[index])};
        `
      )}
    }
  `
  }
`}

}

${
  // nothing can be cast to bool, so an assembly helper is required
  _if(fields.some(({ typeId }) => typeId === "bool"))`
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
`
}

`;
}

function renderKeyTuple(keys: string[]) {
  return (
    `bytes32[] memory _keyTuple = new bytes32[](${keys.length});
` + renderList(keys, (key, index) => `_keyTuple[${index}] = ${key};`)
  );
}

function renderEncodeField(field: RenderSchemaField) {
  let func;
  if (field.arrayElement) {
    func = "EncodeArray.encode";
  } else if (field.isDynamic) {
    func = "bytes";
  } else {
    func = "abi.encodePacked";
  }
  return `${func}(${field.name})`;
}

function renderEncodedLengths(dynamicFields: RenderSchemaField[]) {
  if (dynamicFields.length > 0) {
    return `uint16[] memory _counters = new uint16[](${dynamicFields.length});
${renderList(dynamicFields, ({ name, arrayElement }, index) => {
  if (arrayElement) {
    return `_counters[${index}] = uint16(${name}.length * ${arrayElement.staticByteLength});`;
  } else {
    return `_counters[${index}] = uint16(bytes(${name}).length);`;
  }
})}
PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);
`;
  } else {
    return "";
  }
}

function renderDecodeFieldSingle(field: RenderSchemaField) {
  const { typeId, isDynamic, arrayElement } = field;
  if (arrayElement) {
    // arrays
    return `SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_${arrayElement.typeId}()`;
  } else if (isDynamic) {
    // bytes/string
    return `${typeId}(_blob)`;
  } else {
    return decodeValueType(typeId, field.staticByteLength, 0);
  }
}

function renderDecodeDynamicFieldPartial(field: RenderSchemaDynamicField) {
  const { typeId, arrayElement } = field;
  if (arrayElement) {
    // arrays
    return `SliceLib.getSubslice(_blob, _start, _end).decodeArray_${arrayElement.typeId}()`;
  } else {
    // bytes/string
    return `${typeId}(SliceLib.getSubslice(_blob, _start, _end).toBytes())`;
  }
}

function renderDecodeStaticFieldPartial(field: RenderSchemaStaticField, start: number) {
  const { typeId, staticByteLength } = field;
  return decodeValueType(typeId, staticByteLength, start);
}

function decodeValueType(typeId: string, staticByteLength: number, offset: number) {
  const innerSlice = `Bytes.slice${staticByteLength}(_blob, ${offset})`;
  const bits = staticByteLength * 8;

  if (typeId.match(/^uint\d{1,3}$/) || typeId === "address") {
    return `${typeId}(${innerSlice})`;
  } else if (typeId.match(/^int\d{1,3}$/)) {
    return `${typeId}(uint${bits}(${innerSlice})`;
  } else if (typeId.match(/^bytes\d{1,2}$/)) {
    return innerSlice;
  } else if (typeId === "bool") {
    return `_toBool(uint8(${innerSlice}))`;
  } else {
    throw new Error(`Unknown value type id ${typeId}`);
  }
}
