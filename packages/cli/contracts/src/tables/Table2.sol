// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

uint256 constant _tableId = uint256(keccak256("/Table2"));
uint256 constant Table2TableId = _tableId;

struct Table2Data {
  uint256[] v1;
  int32[] v2;
  bytes16[] v3;
  address[] v4;
  bool[] v5;
}

library Table2 {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](5);
    _schema[0] = SchemaType.UINT256_ARRAY;
    _schema[1] = SchemaType.INT32_ARRAY;
    _schema[2] = SchemaType.BYTES16_ARRAY;
    _schema[3] = SchemaType.ADDRESS_ARRAY;
    _schema[4] = SchemaType.BOOL_ARRAY;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](5);
    _fieldNames[0] = "v1";
    _fieldNames[1] = "v2";
    _fieldNames[2] = "v3";
    _fieldNames[3] = "v4";
    _fieldNames[4] = "v5";
    return ("Table2", _fieldNames);
  }

  /** Register the table's schema  */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema());
  }

  /** Set the table's metadata  */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get v1  */
  function getV1(bytes32 key) internal view returns (uint256[] memory v1) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /** Set v1  */
  function setV1(bytes32 key, uint256[] memory v1) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _primaryKeys, 0, EncodeArray.encode((v1)));
  }

  /** Push an element to v1  */
  function pushV1(bytes32 key, uint256 _element) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 0);
    bytes memory _newBlob = abi.encodePacked(_blob, abi.encodePacked((_element)));
    StoreSwitch.setField(_tableId, _primaryKeys, 0, _newBlob);
  }

  /** Get v2  */
  function getV2(bytes32 key) internal view returns (int32[] memory v2) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_int32());
  }

  /** Set v2  */
  function setV2(bytes32 key, int32[] memory v2) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _primaryKeys, 1, EncodeArray.encode((v2)));
  }

  /** Push an element to v2  */
  function pushV2(bytes32 key, int32 _element) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 1);
    bytes memory _newBlob = abi.encodePacked(_blob, abi.encodePacked((_element)));
    StoreSwitch.setField(_tableId, _primaryKeys, 1, _newBlob);
  }

  /** Get v3  */
  function getV3(bytes32 key) internal view returns (bytes16[] memory v3) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 2);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes16());
  }

  /** Set v3  */
  function setV3(bytes32 key, bytes16[] memory v3) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _primaryKeys, 2, EncodeArray.encode((v3)));
  }

  /** Push an element to v3  */
  function pushV3(bytes32 key, bytes16 _element) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 2);
    bytes memory _newBlob = abi.encodePacked(_blob, abi.encodePacked((_element)));
    StoreSwitch.setField(_tableId, _primaryKeys, 2, _newBlob);
  }

  /** Get v4  */
  function getV4(bytes32 key) internal view returns (address[] memory v4) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 3);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_address());
  }

  /** Set v4  */
  function setV4(bytes32 key, address[] memory v4) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _primaryKeys, 3, EncodeArray.encode((v4)));
  }

  /** Push an element to v4  */
  function pushV4(bytes32 key, address _element) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 3);
    bytes memory _newBlob = abi.encodePacked(_blob, abi.encodePacked((_element)));
    StoreSwitch.setField(_tableId, _primaryKeys, 3, _newBlob);
  }

  /** Get v5  */
  function getV5(bytes32 key) internal view returns (bool[] memory v5) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 4);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bool());
  }

  /** Set v5  */
  function setV5(bytes32 key, bool[] memory v5) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _primaryKeys, 4, EncodeArray.encode((v5)));
  }

  /** Push an element to v5  */
  function pushV5(bytes32 key, bool _element) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _primaryKeys, 4);
    bytes memory _newBlob = abi.encodePacked(_blob, abi.encodePacked((_element)));
    StoreSwitch.setField(_tableId, _primaryKeys, 4, _newBlob);
  }

  /** Get the full data  */
  function get(bytes32 key) internal view returns (Table2Data memory _table) {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _primaryKeys, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values  */
  function set(
    bytes32 key,
    uint256[] memory v1,
    int32[] memory v2,
    bytes16[] memory v3,
    address[] memory v4,
    bool[] memory v5
  ) internal {
    uint16[] memory _counters = new uint16[](5);
    _counters[0] = uint16(v1.length * 32);
    _counters[1] = uint16(v2.length * 4);
    _counters[2] = uint16(v3.length * 16);
    _counters[3] = uint16(v4.length * 20);
    _counters[4] = uint16(v5.length * 1);
    PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);

    bytes memory _data = abi.encodePacked(
      _encodedLengths.unwrap(),
      EncodeArray.encode((v1)),
      EncodeArray.encode((v2)),
      EncodeArray.encode((v3)),
      EncodeArray.encode((v4)),
      EncodeArray.encode((v5))
    );

    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    StoreSwitch.setRecord(_tableId, _primaryKeys, _data);
  }

  /** Set the full data using the data struct  */
  function set(bytes32 key, Table2Data memory _table) internal {
    set(key, _table.v1, _table.v2, _table.v3, _table.v4, _table.v5);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal view returns (Table2Data memory _table) {
    // 0 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 0));

    uint256 _start;
    uint256 _end = 32;

    _start = _end;
    _end += _encodedLengths.atIndex(0);
    _table.v1 = SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint256();

    _start = _end;
    _end += _encodedLengths.atIndex(1);
    _table.v2 = SliceLib.getSubslice(_blob, _start, _end).decodeArray_int32();

    _start = _end;
    _end += _encodedLengths.atIndex(2);
    _table.v3 = SliceLib.getSubslice(_blob, _start, _end).decodeArray_bytes16();

    _start = _end;
    _end += _encodedLengths.atIndex(3);
    _table.v4 = SliceLib.getSubslice(_blob, _start, _end).decodeArray_address();

    _start = _end;
    _end += _encodedLengths.atIndex(4);
    _table.v5 = SliceLib.getSubslice(_blob, _start, _end).decodeArray_bool();
  }

  /* Delete all data for given keys  */
  function deleteRecord(bytes32 key) internal {
    bytes32[] memory _primaryKeys = new bytes32[](1);
    _primaryKeys[0] = bytes32((key));

    StoreSwitch.deleteRecord(_tableId, _primaryKeys);
  }
}
