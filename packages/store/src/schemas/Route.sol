// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

import { IStore } from "../IStore.sol";
import { StoreSwitch } from "../StoreSwitch.sol";
import { StoreCore } from "../StoreCore.sol";
import { SchemaType } from "../Types.sol";
import { Bytes } from "../Bytes.sol";
import { SliceLib } from "../Slice.sol";
import { EncodeArray } from "../tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "../Schema.sol";
import { PackedCounter, PackedCounterLib } from "../PackedCounter.sol";

struct Route {
  address addr;
  bytes4 selector;
  uint8 executionMode;
}

library Route_ {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](3);
    _schema[0] = SchemaType.ADDRESS;
    _schema[1] = SchemaType.BYTES4;
    _schema[2] = SchemaType.UINT8;

    return SchemaLib.encode(_schema);
  }

  /** Register the table's schema */
  function registerSchema(uint256 tableId) internal {
    StoreSwitch.registerSchema(tableId, getSchema());
  }

  function registerSchema(uint256 _tableId, IStore _store) internal {
    _store.registerSchema(_tableId, getSchema());
  }

  /** Set the table's data */
  function set(
    uint256 _tableId,
    bytes32 key,
    address addr,
    bytes4 selector,
    uint8 executionMode
  ) internal {
    bytes memory _data = abi.encodePacked(addr, selector, executionMode);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  function set(
    uint256 _tableId,
    bytes32 key,
    Route memory _table
  ) internal {
    set(_tableId, key, _table.addr, _table.selector, _table.executionMode);
  }

  function setAddr(
    uint256 _tableId,
    bytes32 key,
    address addr
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;
    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked(addr));
  }

  function setSelector(
    uint256 _tableId,
    bytes32 key,
    bytes4 selector
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;
    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked(selector));
  }

  function setExecutionMode(
    uint256 _tableId,
    bytes32 key,
    uint8 executionMode
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;
    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked(executionMode));
  }

  function getAddr(uint256 _tableId, bytes32 key) internal view returns (address addr) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;
    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return address(Bytes.slice20(_blob, 0));
  }

  function getSelector(uint256 _tableId, bytes32 key) internal view returns (bytes4 selector) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;
    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return Bytes.slice4(_blob, 0);
  }

  function getExecutionMode(uint256 _tableId, bytes32 key) internal view returns (uint8 executionMode) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;
    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return uint8(Bytes.slice1(_blob, 0));
  }

  /** Get the table's data */
  function get(uint256 _tableId, bytes32 key) internal view returns (Route memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;
    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  function get(
    uint256 _tableId,
    IStore _store,
    bytes32 key
  ) internal view returns (Route memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;
    bytes memory _blob = _store.getRecord(_tableId, _keyTuple);
    return decode(_blob);
  }

  function decode(bytes memory _blob) internal pure returns (Route memory _table) {
    _table.addr = address(Bytes.slice20(_blob, 0));

    _table.selector = Bytes.slice4(_blob, 20);

    _table.executionMode = uint8(Bytes.slice1(_blob, 24));
  }
}
